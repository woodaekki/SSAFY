Html: 웹페이지 구조
Css: 그 디자인과 레이아웃
----------------------------------------------------------------------------------------
Css selectors
- *: 전체선택자
- 요소 선택자
- .: 클래스 선택자
- #: 아이디 선택자 
- 속성 선택자
----------------------------------------------------------------------------------------

자식 결합자 vs 자손 결합자
자신은 자손 다, 자식(>): 직계만
----------------------------------------------------------------------------------------

명시도가 높은 순: !important > inline 스타일 > id, class, 요소 선택자 > 소스코드선언순서(마지막이 가장 높음)
----------------------------------------------------------------------------------------

상속 되는 속성 vs 상속 되지 않는 속성
: 텍스트류, 레이아웃류
----------------------------------------------------------------------------------------

Block 타입 vs inline 타입 vs inline-block vs none
Block:
-항상 새로운 행으로 나뉨
-너비, 높이 지정 가능
- 지정하지 않으면 가로 너비 100%
- 대표 태그는 h, p, div 태그
Inline:
-새로운 행으로 넘어가지 않음
-너비, 높이 지정 불가
-수직방향은 패딩, 마진, 보딩 적용되나 다른 요소 밀어낼수없음
-수평은 다른 요소 밀어낼 수 있음
-대표 태그는 a,img,strong,em
-단, img는 높이 지정 가능 예외

Inline-block (너비,높이 지정하고 싶은데 줄바꿈되지 않으면 좋겠을 때 사용)
-box속성의 너비, 높이 지정가능
-inline의 새로운 행으로 넘어가지 않고, 패딩, 마진, 보딩 적용되나 다른 요소 밀어낼 수 있음

None: 요소를 화면에 표시하지 않고, 공간조차 부여하지 않음
----------------------------------------------------------------------------------------
Content: 콘텐츠 표시영역
Padding: 콘텐츠 주위 영역
Border: 콘텐츠, 패딩 감싸는 영역
Margin: 가장 바깥 영역
----------------------------------------------------------------------------------------
Shorthand란?
Margin: 10, 20, 30, 40px -> 상/우/하/좌/
Margin: 10, 20, 30px -> 상/좌우/하 지정한것임
----------------------------------------------------------------------------------------
Content-box vs border-box
표준 상자 모델에서 너비, 높이 지정하면 -> content-box 크기 조정한 것임
----------------------------------------------------------------------------------------
Position (페이지 ‘특정항목’의 위치 조정)
Static:
-기본값
-nomal flow에 따라 배치
-top,right,bottom,left 적용안됨
Relative
-nomal flow에 따라 배치
-원래위치(static)기준 이동 
-top,right,bottom,left으로 위치 조정
-다른 요소 영향 안줌
Absolute
-nomal flow에서 제거
-가장가까운 relative 부모요소 기준 이동
-부모요소 없으면 body 기준으로
-top,right,bottom,left으로 위치 조정
-문서에서 요소 차지 공간 없어짐
Fixed
-nomal flow에서 제거
-스크롤해도 항상 같은 위치에 유지됨
-top,right,bottom,left으로 위치 조정
-문서에서 요소 차지 공간 없어짐
Sticky
-Relative+fixed
-스크롤 위치가 임계점에 도달 전까지 Relative처럼 동작
-스크롤이 도달하면 fixed처럼 고정
-다음 sticky나오면 다음 sticky가 대체
----------------------------------------------------------------------------------------
z-index:
-요소의 쌓임 순서 정의
-값이 클수록 위에 쌓임
-기본값은 auto
-부모요소 영향 받음 (부모가 낮으면 자식 암만 높아도 위로 못올라감)
- z가 같으면 html 문서순서대로 쌓임
----------------------------------------------------------------------------------------
Flexbox
주축: main start ~ main end
교차축: cross start~cross end
Flex container> flex item
<속성목록>
flex container
-flex-direction (기본 flex-item은 가로행 기준, column 적용시 변경)
-flex-wrap (한행에 들어가지 않을 경우 wrap 지정시, 너비 초과하면 줄바꿈)
-justify-content(주축기준)/center/space-between/ space-around/ space-evenly
-align-content(교차축기준-wrap 설정된 경우에만 여러행에 적용) )/center/space-between/ space-around/ space-evenly
-align-items(교차축기준)/center
Flex item
-align-self(교차축 기준)
-flex-grow(남는 행 비율따라 분배)
-flex-basis(flex 초기크기값 지정, width랑 동시 적용시, basis 우선)
-> flex는 배치, content는 공간, align은 정렬 속성
-> justify-items및 self 속성은 margin auto 통해 정렬 가능하므로 필요없음
----------------------------------------------------------------------------------------
마진상쇄: margin top과 bottom이 만나면 더 큰 margin으로 결합됨(복잡한 레이아웃에서 간격 일관되게 유지하려는 목적)
----------------------------------------------------------------------------------------
Margin-auto: 블록요소에서 너비 지정한 후, 가운데로 정렬해줌
----------------------------------------------------------------------------------------
CDN = 사용자와 가까운 cdn 서버에 콘텐츠를 저장하여 콘텐츠 로딩 소요시간을 줄임

예시) mt-5 = property, sides, size
property
-m: 마진
-p: 패딩
sides
-t: 탑
-b: 바텀
-s: 왼쪽
-e: 오른쪽
-y: 상하
-x: 좌우
-blank: 상하좌우
size:
-0~5까지 0에서 0.25rem(4px)씩 증가
----------------------------------------------------------------------------------------
Reset css
-모든 html 스타일을 일관된 기준으로 재설정하는 것
(예시) nomalize css)
----------------------------------------------------------------------------------------
Bootstrap
-typography(제목,텍스트,목록) / color(색상) / component(ui:버튼,네비게이션바, 카드)

Semantic web
-개발자가 웹페이지 컨텐츠를 이해하기 쉽도록 

Oocss
-구조와 스킨/ 컨테이너와 컨텐츠를 분리하여 재사용성을 높인 방법
----------------------------------------------------------------------------------------
Grid system
-웹페이지 레이아웃의 컬럼을 12개로 구성한 시스템
-목적: 반응형 디자인을 위해 사용
-*반응형 디자인: 디바이스의 종류나 화면 크기에 상관없이 일관된 레이아웃 및 사용자 경험을 제공
-container
-collumn
-gutter(컬럼과 컬럼 사이의 여백)
-Nesting: 중첩
-Offset: 상쇄

Breakpoints: 웹페이지를 다양한 화면 크기에서 적절하게 배치하기 위한 분기점
(xs, sm, md, lg, xl, xxl) -> *최대 너비값 “이상”으로 화면이 커지만 동작 변경
