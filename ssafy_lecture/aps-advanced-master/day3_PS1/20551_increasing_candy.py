# 사탕을 담은 상자
#   - A, B, C 개
#   - 순증가하길 원한다.
#   - 각 상자에는 1개 이상의 사탕이 들어있어야 한다.
#
# 목표
#   - 순증가하도록 만들자
#     - 0개 이상을 먹자
#
# 내 설계
#   - 두 번째 상자
#     - 세 번째 상자보다 작게 만들자
#   - 첫 번째 상자
#     - 두 번째 상자보다 작게 만들자
#
# --------------------- 문제 읽기 단계
#
# --------------------- 설계 시작
#
# - 자료구조
#  - 3개의 숫자 + 먹은 개수 만 저장하면 끝
#  - 리스트 vs A,B,C 저장
#
# - 알고리즘
#  - 불가능한 케이스 미리 제거
#   - B가 2보다 작은 경우
#   - C가 3보다 작은 경우
#  - B 는 C 보다 작아야 한다
#   - B를 C보다 작을 때 까지 하나씩 감소
#     - [검증] 사탕의 개수가 많으면, 시간 초과 가능성
# 	- 3000 까지니 가능하다.
#   - B가 C보다 크다면,
# 	B = C - 1 로 만들어준다.
#
# ---------------------- 검증까지 완료

import sys
sys.stdin = open("input.txt", "r")

T = int(input())

for tc in range(1, T + 1):
    # 변수가 3개 뿐이기 때문에, 리스트를 굳이 쓸 필요 없다.
    A, B, C = map(int, input().split())

    # 불가능한 케이스를 미리 없애자.
    # - A < B < C 구조를 만들 수 없는 상황
    if B < 2 or C < 3:
        print(f'#{tc} -1')
        continue

    eat_count = 0
    # B가 C 이상이라면, B = C - 1 로 만들자.
    if B >= C:
        eat_count += B - (C - 1)  # 차이만큼 먹는다.
        B = C - 1

    # A가 B 이상이라면, A = B - 1 로 만들자.
    if A >= B:
        eat_count += A - (B - 1)
        A = B - 1

    print(f'#{tc} {eat_count}')

